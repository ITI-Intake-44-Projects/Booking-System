// <auto-generated />
using System;
using BookingSystem.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace BookingSystem.Migrations
{
    [DbContext(typeof(BookingContext))]
    [Migration("20240329225946_location-hotel-room-nonhotel-data")]
    partial class locationhotelroomnonhoteldata
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.3")
                .HasAnnotation("Proxies:ChangeTracking", false)
                .HasAnnotation("Proxies:CheckEquality", false)
                .HasAnnotation("Proxies:LazyLoading", true)
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("BookingSystem.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("City")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Country")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Gender")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<byte[]>("Image")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("BookingSystem.Models.Booking", b =>
                {
                    b.Property<int?>("BookingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int?>("BookingId"));

                    b.Property<DateTime?>("CheckInDate")
                        .HasColumnType("Date");

                    b.Property<DateTime?>("CheckOutDate")
                        .HasColumnType("Date");

                    b.Property<int?>("Days")
                        .HasColumnType("int");

                    b.Property<int?>("NonHotelId")
                        .HasColumnType("int");

                    b.Property<int?>("PayementId")
                        .HasColumnType("int");

                    b.Property<int?>("RoomId")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("BookingId");

                    b.HasIndex("NonHotelId");

                    b.HasIndex("PayementId")
                        .IsUnique()
                        .HasFilter("[PayementId] IS NOT NULL");

                    b.HasIndex("RoomId");

                    b.HasIndex("UserId");

                    b.ToTable("Bookings");
                });

            modelBuilder.Entity("BookingSystem.Models.Dependant", b =>
                {
                    b.Property<int>("DepId")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("DeptName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Gender")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("DepId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("Dependants");
                });

            modelBuilder.Entity("BookingSystem.Models.FeedBack", b =>
                {
                    b.Property<int>("FeedbackId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FeedbackId"));

                    b.Property<string>("Feedback")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Hotel_Id")
                        .HasColumnType("int");

                    b.Property<int?>("NonHotel_Id")
                        .HasColumnType("int");

                    b.Property<int?>("Rate")
                        .HasColumnType("int");

                    b.Property<string>("User_Id")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("FeedbackId");

                    b.HasIndex("Hotel_Id");

                    b.HasIndex("NonHotel_Id");

                    b.HasIndex("User_Id");

                    b.ToTable("FeedBacks");
                });

            modelBuilder.Entity("BookingSystem.Models.Hotel", b =>
                {
                    b.Property<int>("HotelId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("HotelId"));

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HotelDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HotelType")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("LocationId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("RoomNumber")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("HotelId");

                    b.HasIndex("LocationId");

                    b.ToTable("Hotels");

                    b.HasData(
                        new
                        {
                            HotelId = 1,
                            Address = "Bali, Indonesia",
                            HotelDescription = "Private villas with stunning ocean views",
                            HotelType = "Beachfront",
                            LocationId = 1,
                            Name = "Sun Kissed Villas"
                        },
                        new
                        {
                            HotelId = 2,
                            Address = "Norway",
                            HotelDescription = "Sustainable cabins nestled amidst the fjords",
                            HotelType = "Eco-lodge",
                            LocationId = 2,
                            Name = "The Nordic Escape"
                        },
                        new
                        {
                            HotelId = 3,
                            Address = "Swiss Alps",
                            HotelDescription = "Luxury chalet with direct access to ski slopes",
                            HotelType = "Ski-in/Ski-out",
                            LocationId = 3,
                            Name = "Alpenglow Chalet"
                        },
                        new
                        {
                            HotelId = 4,
                            Address = "Marrakech, Morocco",
                            HotelDescription = "Traditional Moroccan riad with a central courtyard",
                            HotelType = "Riad",
                            LocationId = 4,
                            Name = "Riad of Marrakech"
                        },
                        new
                        {
                            HotelId = 5,
                            Address = "New York City, USA",
                            HotelDescription = "Stylish hotel in the heart of the city",
                            HotelType = "Boutique",
                            LocationId = 5,
                            Name = "The Urban Oasis"
                        },
                        new
                        {
                            HotelId = 6,
                            Address = "Scottish Highlands, UK",
                            HotelDescription = "Converted medieval castle with modern amenities",
                            HotelType = "Historic",
                            LocationId = 6,
                            Name = "Castle on the Hill"
                        },
                        new
                        {
                            HotelId = 7,
                            Address = "Napa Valley, California, USA",
                            HotelDescription = "Relaxing stay amidst rolling vineyards with wine tastings",
                            HotelType = "Winery",
                            LocationId = 7,
                            Name = "Vineyard Escape"
                        },
                        new
                        {
                            HotelId = 8,
                            Address = "Maldives",
                            HotelDescription = "Unique bungalows perched above crystal-clear waters",
                            HotelType = "Overwater Bungalows",
                            LocationId = 8,
                            Name = "The Floating Bungalows"
                        },
                        new
                        {
                            HotelId = 9,
                            Address = "Amazon Rainforest, Brazil",
                            HotelDescription = "Immerse yourself in nature with sustainable lodging in the rainforest",
                            HotelType = "Eco-tourism",
                            LocationId = 9,
                            Name = "The Jungle Lodge"
                        },
                        new
                        {
                            HotelId = 10,
                            Address = "Iceland",
                            HotelDescription = "Secluded cabins with a chance to witness the aurora borealis",
                            HotelType = "Remote",
                            LocationId = 10,
                            Name = "The Northern Lights Retreat"
                        },
                        new
                        {
                            HotelId = 11,
                            Address = "Ubud, Bali, Indonesia",
                            HotelDescription = "Tranquil retreat with meditation classes and yoga sessions",
                            HotelType = "Spiritual Retreat",
                            LocationId = 11,
                            Name = "Temple View Sanctuary"
                        },
                        new
                        {
                            HotelId = 12,
                            Address = "Patagonia, Argentina",
                            HotelDescription = "Basecamp for exploring glaciers, mountains, and wildlife",
                            HotelType = "Adventure",
                            LocationId = 12,
                            Name = "Patagonian Adventure Lodge"
                        },
                        new
                        {
                            HotelId = 13,
                            Address = "Uzbekistan",
                            HotelDescription = "Caravanserai-style hotel along the ancient Silk Road trade route",
                            HotelType = "Historical",
                            LocationId = 13,
                            Name = "Silk Road Oasis"
                        },
                        new
                        {
                            HotelId = 14,
                            Address = "Wadi Rum, Jordan",
                            HotelDescription = "Luxurious tents under a canopy of stars in the desert",
                            HotelType = "Glamping",
                            LocationId = 14,
                            Name = "Desert Stargazing Camp"
                        },
                        new
                        {
                            HotelId = 15,
                            Address = "Great Barrier Reef, Australia",
                            HotelDescription = "Unique hotel offering underwater views of marine life",
                            HotelType = "Underwater",
                            LocationId = 15,
                            Name = "Underwater Sanctuary"
                        },
                        new
                        {
                            HotelId = 16,
                            Address = "Costa Rica",
                            HotelDescription = "Sustainable cabins nestled amidst the rainforest canopy",
                            HotelType = "Ecotourism",
                            LocationId = 16,
                            Name = "Treetop Canopy Cabins"
                        });
                });

            modelBuilder.Entity("BookingSystem.Models.HotelImages", b =>
                {
                    b.Property<int>("HotelId")
                        .HasColumnType("int");

                    b.Property<byte[]>("Image")
                        .HasColumnType("varbinary(900)");

                    b.HasKey("HotelId", "Image");

                    b.ToTable("HotelImages");
                });

            modelBuilder.Entity("BookingSystem.Models.Location", b =>
                {
                    b.Property<int>("LocationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("LocationId"));

                    b.Property<string>("City")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<byte[]>("CityImage")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("Country")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("LocationId");

                    b.ToTable("Locations");

                    b.HasData(
                        new
                        {
                            LocationId = 1,
                            City = "Bali",
                            Country = "Indonesia"
                        },
                        new
                        {
                            LocationId = 2,
                            City = "Norway",
                            Country = "Norway"
                        },
                        new
                        {
                            LocationId = 3,
                            City = "Swiss Alps",
                            Country = "Switzerland"
                        },
                        new
                        {
                            LocationId = 4,
                            City = "Marrakech",
                            Country = "Morocco"
                        },
                        new
                        {
                            LocationId = 5,
                            City = "New York City",
                            Country = "USA"
                        },
                        new
                        {
                            LocationId = 6,
                            City = "Scottish Highlands",
                            Country = "UK"
                        },
                        new
                        {
                            LocationId = 7,
                            City = "Napa Valley, California",
                            Country = "USA"
                        },
                        new
                        {
                            LocationId = 8,
                            City = "Maldives",
                            Country = "Maldives"
                        },
                        new
                        {
                            LocationId = 9,
                            City = "Amazon Rainforest",
                            Country = "Brazil"
                        },
                        new
                        {
                            LocationId = 10,
                            City = "Iceland",
                            Country = "Iceland"
                        },
                        new
                        {
                            LocationId = 11,
                            City = "Ubud, Bali",
                            Country = "Indonesia"
                        },
                        new
                        {
                            LocationId = 12,
                            City = "Patagonia",
                            Country = "Argentina"
                        },
                        new
                        {
                            LocationId = 13,
                            City = "Uzbekistan",
                            Country = "Uzbekistan"
                        },
                        new
                        {
                            LocationId = 14,
                            City = "Wadi Rum",
                            Country = "Jordan"
                        },
                        new
                        {
                            LocationId = 15,
                            City = "Great Barrier Reef",
                            Country = "Australia"
                        },
                        new
                        {
                            LocationId = 16,
                            City = "Rica",
                            Country = "Costa Rica"
                        });
                });

            modelBuilder.Entity("BookingSystem.Models.NonHotel", b =>
                {
                    b.Property<int>("NonHotelId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("NonHotelId"));

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("LocationId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool?>("Reserved")
                        .HasMaxLength(10)
                        .HasColumnType("bit");

                    b.Property<string>("Type")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("NonHotelId");

                    b.HasIndex("LocationId");

                    b.ToTable("NonHotels");

                    b.HasData(
                        new
                        {
                            NonHotelId = 1,
                            Address = "4 Lavender Lane, Willowbrook",
                            Description = "Escape to a tranquil retreat in a picturesque village. This cozy cottage features a wood-burning fireplace, a private garden, and views of rolling hills.",
                            LocationId = 1,
                            Name = "The Rosewood Cottage",
                            Reserved = false,
                            Type = "Cottage"
                        },
                        new
                        {
                            NonHotelId = 2,
                            Address = "Forest Road 12, Redwood National Park",
                            Description = "Immerse yourself in nature at this secluded cabin nestled among towering redwood trees. Enjoy stargazing from the hot tub, hiking trails, and a cozy fireplace.",
                            LocationId = 9,
                            Name = "The Redwood Hideaway",
                            Reserved = false,
                            Type = "Cabin"
                        },
                        new
                        {
                            NonHotelId = 3,
                            Address = "154 Apple Orchard Lane, Sunnydale",
                            Description = "Reconnect with nature and farm life at this charming farmhouse. Collect fresh eggs, help with farm chores, and enjoy home-cooked meals made with local produce.",
                            LocationId = 16,
                            Name = "Sunrise Farmstay",
                            Reserved = true,
                            Type = "Farmstay"
                        },
                        new
                        {
                            NonHotelId = 4,
                            Address = "Lake Serenity Marina, Slip 54",
                            Description = "Experience tranquility on a spacious houseboat with panoramic lake views. Relax on the sundeck, kayak to nearby islands, and unwind under starry skies.",
                            LocationId = 14,
                            Name = "The Tranquility",
                            Reserved = false,
                            Type = "Houseboat"
                        },
                        new
                        {
                            NonHotelId = 5,
                            Address = "Hidden Forest Trail, Treetop Haven",
                            Description = "Escape to a magical world in this luxurious treehouse nestled among ancient pines. Enjoy panoramic forest views, a private hot tub, and a cozy fireplace.",
                            LocationId = 4,
                            Name = "The Enchanted Canopy",
                            Reserved = false,
                            Type = "Treehouse"
                        },
                        new
                        {
                            NonHotelId = 6,
                            Address = "Isle of Serenity, Private Island",
                            Description = "Immerse yourself in paradise on a private island villa surrounded by crystal-clear waters. Enjoy secluded beaches, snorkeling, kayaking, and breathtaking sunsets.",
                            LocationId = 8,
                            Name = "Isle of Serenity",
                            Reserved = false,
                            Type = "Villa"
                        },
                        new
                        {
                            NonHotelId = 7,
                            Address = "Mountain Meadows Yurt Village",
                            Description = "Experience the peace of a yurt retreat in a breathtaking mountain setting. Enjoy stargazing from the clear mountain skies, hiking trails, and campfire gatherings.",
                            LocationId = 12,
                            Name = "Stargazer Yurts",
                            Reserved = false,
                            Type = "Yurt"
                        });
                });

            modelBuilder.Entity("BookingSystem.Models.NonHotelImages", b =>
                {
                    b.Property<int>("NonHotelId")
                        .HasColumnType("int");

                    b.Property<byte[]>("Image")
                        .HasColumnType("varbinary(900)");

                    b.HasKey("NonHotelId", "Image");

                    b.ToTable("NonHotelImages");
                });

            modelBuilder.Entity("BookingSystem.Models.Payment", b =>
                {
                    b.Property<int>("PaymentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PaymentId"));

                    b.Property<int?>("Amount")
                        .HasColumnType("int");

                    b.Property<DateTime?>("Date")
                        .HasColumnType("Date");

                    b.Property<string>("PaymentMethod")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("PaymentId");

                    b.ToTable("Payments");
                });

            modelBuilder.Entity("BookingSystem.Models.Room", b =>
                {
                    b.Property<int>("RoomID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RoomID"));

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("HotelId")
                        .HasColumnType("int");

                    b.Property<int?>("PriceOfNight")
                        .HasColumnType("int");

                    b.Property<bool?>("Reserved")
                        .HasMaxLength(10)
                        .HasColumnType("bit");

                    b.Property<string>("RoomNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoomType")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("RoomID");

                    b.HasIndex("HotelId");

                    b.ToTable("Rooms");

                    b.HasData(
                        new
                        {
                            RoomID = 1,
                            Description = "Modern cabin with a fireplace, jacuzzi, and private balcony",
                            HotelId = 1,
                            PriceOfNight = 400,
                            RoomNumber = "Cabin 3",
                            RoomType = "Luxury Cabin"
                        },
                        new
                        {
                            RoomID = 2,
                            Description = "Comfortable room with mountain views",
                            HotelId = 1,
                            PriceOfNight = 250,
                            RoomNumber = "Room 101",
                            RoomType = "Standard Room"
                        },
                        new
                        {
                            RoomID = 3,
                            Description = "Spacious suite with a living area, fireplace, and balcony",
                            HotelId = 2,
                            PriceOfNight = 500,
                            RoomNumber = "Suite 202",
                            RoomType = "Suite"
                        },
                        new
                        {
                            RoomID = 4,
                            Description = "Traditional Moroccan room with a central courtyard view",
                            HotelId = 3,
                            PriceOfNight = 150,
                            RoomNumber = "Room A1",
                            RoomType = "Standard Riad Room"
                        },
                        new
                        {
                            RoomID = 5,
                            Description = "Luxurious suite with a private hammam (steam bath)",
                            HotelId = 4,
                            PriceOfNight = 300,
                            RoomNumber = "Suite B2",
                            RoomType = "Riad Suite"
                        },
                        new
                        {
                            RoomID = 6,
                            Description = "Modern room with stunning city views",
                            HotelId = 5,
                            PriceOfNight = 200,
                            RoomNumber = "Room 301",
                            RoomType = "City View Room"
                        },
                        new
                        {
                            RoomID = 7,
                            Description = "Compact apartment with a kitchenette and city views",
                            HotelId = 6,
                            PriceOfNight = 250,
                            RoomNumber = "Suite 402",
                            RoomType = "Studio Apartment"
                        },
                        new
                        {
                            RoomID = 8,
                            Description = "Cozy room with a historical feel",
                            HotelId = 7,
                            PriceOfNight = 180,
                            RoomNumber = "Room 501",
                            RoomType = "Standard Room"
                        },
                        new
                        {
                            RoomID = 9,
                            Description = "Luxury suite with a four-poster bed and a fireplace",
                            HotelId = 8,
                            PriceOfNight = 400,
                            RoomNumber = "Suite 602",
                            RoomType = "Four-Poster Suite"
                        },
                        new
                        {
                            RoomID = 10,
                            Description = "Luxury suite with a four-poster bed and a fireplace",
                            HotelId = 9,
                            PriceOfNight = 400,
                            RoomNumber = "Suite 610",
                            RoomType = "Fine Suite"
                        },
                        new
                        {
                            RoomID = 11,
                            Description = "Private bungalow nestled in the rainforest canopy with a balcony",
                            HotelId = 10,
                            PriceOfNight = 250,
                            RoomNumber = "Bungalow 3",
                            RoomType = "Jungle Bungalow"
                        },
                        new
                        {
                            RoomID = 12,
                            Description = "Cozy cabin with basic amenities and stunning aurora borealis views",
                            HotelId = 11,
                            PriceOfNight = 180,
                            RoomNumber = "Cabin 4",
                            RoomType = "Standard Cabin"
                        },
                        new
                        {
                            RoomID = 13,
                            Description = "Spacious chalet with a fireplace, jacuzzi, and private balcony with aurora views",
                            HotelId = 12,
                            PriceOfNight = 500,
                            RoomNumber = "Chalet 5",
                            RoomType = "Luxury Chalet"
                        },
                        new
                        {
                            RoomID = 14,
                            Description = "Comfortable room with a balcony overlooking the temple grounds",
                            HotelId = 13,
                            PriceOfNight = 120,
                            RoomNumber = "Room 701",
                            RoomType = "Deluxe Room"
                        },
                        new
                        {
                            RoomID = 15,
                            Description = "Secluded bungalow with a private meditation garden",
                            HotelId = 14,
                            PriceOfNight = 300,
                            RoomNumber = "Retreat 802",
                            RoomType = "Private Retreat"
                        },
                        new
                        {
                            RoomID = 16,
                            Description = "Secluded bungalow with a private meditation garden",
                            HotelId = 15,
                            PriceOfNight = 300,
                            RoomNumber = "Retreat 802",
                            RoomType = "Private Retreat"
                        },
                        new
                        {
                            RoomID = 17,
                            Description = "Secluded bungalow with a private meditation garden",
                            HotelId = 16,
                            PriceOfNight = 300,
                            RoomNumber = "Retreat 802",
                            RoomType = "Private Retreat"
                        },
                        new
                        {
                            RoomID = 18,
                            Description = "Secluded bungalow with a private meditation garden",
                            HotelId = 2,
                            PriceOfNight = 300,
                            RoomNumber = "Retreat 802",
                            RoomType = "Private Retreat"
                        },
                        new
                        {
                            RoomID = 19,
                            Description = "Secluded bungalow with a private meditation garden",
                            HotelId = 3,
                            PriceOfNight = 300,
                            RoomNumber = "Retreat 802",
                            RoomType = "Private Retreat"
                        },
                        new
                        {
                            RoomID = 20,
                            Description = "Secluded bungalow with a private meditation garden",
                            HotelId = 4,
                            PriceOfNight = 300,
                            RoomNumber = "Retreat 802",
                            RoomType = "Private Retreat"
                        },
                        new
                        {
                            RoomID = 21,
                            Description = "Secluded bungalow with a private meditation garden",
                            HotelId = 1,
                            PriceOfNight = 300,
                            RoomNumber = "Retreat 802",
                            RoomType = "Private Retreat"
                        },
                        new
                        {
                            RoomID = 22,
                            Description = "Comfortable room with a balcony overlooking the temple grounds",
                            HotelId = 1,
                            PriceOfNight = 120,
                            RoomNumber = "Room 701",
                            RoomType = "Deluxe Room"
                        });
                });

            modelBuilder.Entity("BookingSystem.Models.RoomImages", b =>
                {
                    b.Property<int>("RoomId")
                        .HasColumnType("int");

                    b.Property<byte[]>("Image")
                        .HasColumnType("varbinary(900)");

                    b.HasKey("RoomId", "Image");

                    b.ToTable("RoomImages");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("BookingSystem.Models.Booking", b =>
                {
                    b.HasOne("BookingSystem.Models.NonHotel", "NonHotel")
                        .WithMany("Bookings")
                        .HasForeignKey("NonHotelId");

                    b.HasOne("BookingSystem.Models.Payment", "Payment")
                        .WithOne("Booking")
                        .HasForeignKey("BookingSystem.Models.Booking", "PayementId");

                    b.HasOne("BookingSystem.Models.Room", "Room")
                        .WithMany("Bookings")
                        .HasForeignKey("RoomId");

                    b.HasOne("BookingSystem.Models.ApplicationUser", "User")
                        .WithMany("Bookings")
                        .HasForeignKey("UserId");

                    b.Navigation("NonHotel");

                    b.Navigation("Payment");

                    b.Navigation("Room");

                    b.Navigation("User");
                });

            modelBuilder.Entity("BookingSystem.Models.Dependant", b =>
                {
                    b.HasOne("BookingSystem.Models.ApplicationUser", "User")
                        .WithMany("Dependants")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("BookingSystem.Models.FeedBack", b =>
                {
                    b.HasOne("BookingSystem.Models.Hotel", "Hotel")
                        .WithMany("FeedBacks")
                        .HasForeignKey("Hotel_Id");

                    b.HasOne("BookingSystem.Models.NonHotel", "NonHotel")
                        .WithMany("FeedBacks")
                        .HasForeignKey("NonHotel_Id");

                    b.HasOne("BookingSystem.Models.ApplicationUser", "User")
                        .WithMany("FeedBacks")
                        .HasForeignKey("User_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Hotel");

                    b.Navigation("NonHotel");

                    b.Navigation("User");
                });

            modelBuilder.Entity("BookingSystem.Models.Hotel", b =>
                {
                    b.HasOne("BookingSystem.Models.Location", "Location")
                        .WithMany("Hotels")
                        .HasForeignKey("LocationId");

                    b.Navigation("Location");
                });

            modelBuilder.Entity("BookingSystem.Models.HotelImages", b =>
                {
                    b.HasOne("BookingSystem.Models.Hotel", "Hotel")
                        .WithMany("HotelImages")
                        .HasForeignKey("HotelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Hotel");
                });

            modelBuilder.Entity("BookingSystem.Models.NonHotel", b =>
                {
                    b.HasOne("BookingSystem.Models.Location", "Location")
                        .WithMany("NonHotels")
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Location");
                });

            modelBuilder.Entity("BookingSystem.Models.NonHotelImages", b =>
                {
                    b.HasOne("BookingSystem.Models.NonHotel", "NonHotel")
                        .WithMany("NonHotelImages")
                        .HasForeignKey("NonHotelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("NonHotel");
                });

            modelBuilder.Entity("BookingSystem.Models.Room", b =>
                {
                    b.HasOne("BookingSystem.Models.Hotel", "Hotel")
                        .WithMany("Rooms")
                        .HasForeignKey("HotelId");

                    b.Navigation("Hotel");
                });

            modelBuilder.Entity("BookingSystem.Models.RoomImages", b =>
                {
                    b.HasOne("BookingSystem.Models.Room", "Room")
                        .WithMany("RoomImages")
                        .HasForeignKey("RoomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Room");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("BookingSystem.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("BookingSystem.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BookingSystem.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("BookingSystem.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BookingSystem.Models.ApplicationUser", b =>
                {
                    b.Navigation("Bookings");

                    b.Navigation("Dependants");

                    b.Navigation("FeedBacks");
                });

            modelBuilder.Entity("BookingSystem.Models.Hotel", b =>
                {
                    b.Navigation("FeedBacks");

                    b.Navigation("HotelImages");

                    b.Navigation("Rooms");
                });

            modelBuilder.Entity("BookingSystem.Models.Location", b =>
                {
                    b.Navigation("Hotels");

                    b.Navigation("NonHotels");
                });

            modelBuilder.Entity("BookingSystem.Models.NonHotel", b =>
                {
                    b.Navigation("Bookings");

                    b.Navigation("FeedBacks");

                    b.Navigation("NonHotelImages");
                });

            modelBuilder.Entity("BookingSystem.Models.Payment", b =>
                {
                    b.Navigation("Booking")
                        .IsRequired();
                });

            modelBuilder.Entity("BookingSystem.Models.Room", b =>
                {
                    b.Navigation("Bookings");

                    b.Navigation("RoomImages");
                });
#pragma warning restore 612, 618
        }
    }
}
